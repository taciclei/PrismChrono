# ü§ñ AIDEX - R√®gles de G√©n√©ration de Code pour IA



**IMPORTANT:** Ces r√®gles sont des **contraintes strictes** pour toute g√©n√©ration ou modification de code par l'IA dans le projet EyeSloth Trainer. Elles compl√®tent et pr√©cisent le **Sprint Blueprint** actif, qui reste la source de v√©rit√© principale pour le contenu sp√©cifique du sprint.

parle moi tjours en francais !
---

## 1. Contexte d'Ex√©cution (Toujours requis dans le prompt)

*   **R√©f√©rence au Blueprint :** Toujours sp√©cifier l'ID du Sprint Blueprint (`BP-XX-YYY`) et la t√¢che sp√©cifique (`EYSL-XXX`) concern√©e.
*   **P√©rim√®tre d'Action :** N'intervenir *que* sur les fichiers explicitement list√©s dans la section `Cartographie des Fichiers` du Blueprint pour la t√¢che assign√©e.
    *   **Ne jamais cr√©er de nouveaux fichiers non sp√©cifi√©s dans le Blueprint.**
    *   **Ne jamais modifier des fichiers non sp√©cifi√©s dans le Blueprint.**
    *   Si une modification semble n√©cessaire hors p√©rim√®tre, le signaler au d√©veloppeur pour validation et mise √† jour √©ventuelle du Blueprint.
*   **R√©f√©rence aux Artefacts :** Si la t√¢che implique des diagrammes Mermaid (`spec/` ou Blueprint) ou des SVG (`wireframes/` ou Blueprint), r√©f√©rencer leur ID ou leur nom exact dans le prompt. Le code g√©n√©r√© *doit* correspondre strictement √† ces artefacts.

---

## 2. Structure du Projet & Architecture (DDD & Clean Architecture - Structure Actuelle)

*   **Structure Impos√©e :** Respecter *imp√©rativement* la structure de dossiers **existante** du projet. Les principales couches sont organis√©es comme suit (r√©f√©rer √† l'arborescence fournie pour les d√©tails) :
    *   **`src/Domain/`** : Logique m√©tier pure, ind√©pendante des frameworks.
        *   `Entities/`, `ValueObjects/`, `Repositories/` (Interfaces), `Services/` (Domain Logic), `Events/`.
    *   **`src/Application/`** : Orchestration, cas d'utilisation.
        *   `UseCases/` (ou `Services/`), `DTOs/`, `Interfaces/` (App Services).
    *   **`src/Infrastructure/`** : D√©tails techniques, d√©pendances externes.
        *   `Repositories/` (Impl√©mentations), `Persistence/`, `ExternalServices/`, `Services/` (Ex: FaceDetection, Speech Recognition), `Vision/` (Impl√©mentations li√©es √† VisionKit/OpenCV si applicable).
    *   **`src/Presentation/`** : UI, interaction utilisateur.
        *   `Views/` (SwiftUI), `ViewModels/`, `Coordinators/` (Navigation).
    *   **`src/Shared/`** : Code partag√© transversalement (Constantes, Extensions g√©n√©riques, Utils). **Utiliser avec parcimonie.**
    *   *Note :* Certains fichiers existent encore hors de `src/`. Les nouvelles impl√©mentations doivent suivre la structure `src/`. Le Blueprint indiquera si une refactorisation est pr√©vue.
*   **D√©pendances Inter-Couches (Rappel Strict) :**
    *   `Presentation` -> `Application`
    *   `Application` -> `Domain`
    *   `Infrastructure` -> `Domain` (impl√©mente interfaces), `Application` (utilise interfaces)
    *   **INTERDIT :** `Domain` -> (`Application`, `Infrastructure`, `Presentation`)
    *   **INTERDIT :** `Application` -> (`Infrastructure`, `Presentation`)
*   **Bounded Contexts :** Si le Blueprint sp√©cifie un Bounded Context (ex: `EvaluationVisuelle`, `TherapyExecution`), s'assurer que le code reste dans les limites de ce contexte (sous-dossiers d√©di√©s, d√©pendances limit√©es).
*   **Repositories :** Interfaces dans `src/Domain/Repositories/`. Impl√©mentations dans `src/Infrastructure/Repositories/`. `Application` et `Domain` utilisent *uniquement* les interfaces du Domaine.
*   **Services :** Logique m√©tier dans `src/Domain/Services/`. Orchestration dans `src/Application/UseCases/` ou `src/Application/Services/`. Services techniques (FaceDetection, Speech) dans `src/Infrastructure/Services/`, accessibles via des interfaces d√©finies par l'Application ou le Domaine.

---

## 3. Principes SOLID (Contraintes Mesurables - Rappel Strict)

*   **(S) Responsabilit√© Unique :** Max 1 responsabilit√© par type, Max 15 lignes/fonction, Max 3 d√©pendances inject√©es, Max 200 lignes/fichier, Max 1 m√©thode publique/use case.
*   **(O) Ouvert/Ferm√© :** Injection de d√©pendances via `init` obligatoire. Extensions via protocoles/impl√©mentations multiples. Pas de modification directe sauf si sp√©cifi√©.
*   **(L) Substitution de Liskov :** Respect strict du contrat du type de base. Inclure `assert` si demand√©.
*   **(I) S√©gr√©gation d'Interface :** Max 3 m√©thodes/protocole. Interfaces sp√©cifiques au client.
*   **(D) Inversion de D√©pendance :** D√©pendre d'abstractions (protocoles). Protocoles d√©finis par le client (App ou Domain). Pas d'instanciation directe inter-couches (utiliser injection).

---

## 4. Style de Code & Conventions Swift (EyeSloth Trainer - Rappel Strict)

*   **Langage :** Swift (derni√®re version stable du projet).
*   **Framework UI :** **SwiftUI** par d√©faut. UIKit via Representables *uniquement* si le Blueprint le demande explicitement.
*   **Immuabilit√© :** Pr√©f√©rer `let`. `struct` pour VOs/DTOs.
*   **Gestion Erreurs :** `enum Error`. Pr√©f√©rer `Result<Success, Failure>`. Pas de `fatalError()`.
*   **Asynchronisme :** **`async/await`**.
*   **Nommage :** Anglais (sauf vocabulaire ubiquitaire valid√©), clair, explicite, conventions Swift. Pas d'abr√©viations non standard.
*   **Formatage :** Respecter SwiftLint configur√©.
*   **Documentation :** `///` pour *tout* `public`/`internal`. Expliquer le *pourquoi*. Markdown.
*   **Organisation :** `extension`, `// MARK: -`.
*   **Acc√®s :** Niveau le plus restrictif (`private` > `fileprivate` > `internal` > `public`).

---

## 5. Domaine Sp√©cifique (EyeSloth Trainer - Pr√©cisions)

*   **Vocabulaire :** Utiliser *exactement* les termes du glossaire/Blueprint/`src/Domain/`. Exemples actuels : `VisualAcuityResult`, `ContrastSensitivityResult`, `Patient`, `VisualAcuityTest`.
*   **Value Objects (`src/Domain/ValueObjects/`) :** Mesures, configurations, r√©sultats partiels. Immuables (`struct`), validation dans `init`.
*   **Entities (`src/Domain/Entities/`) :** Objets avec identit√© (`id: UUID`). Ex: `Patient`, `VisualAcuityTest`.
*   **Aggregates (Ex: `src/Domain/Aggregates/`) :** Racine + entit√©s/VOs li√©s. Modifications via la racine. Respecter limites du Blueprint.
*   **R√®gles M√©tier :** **Exclusivement** dans `src/Domain/`.

---

## 6. UI & UX (Selon Artefacts - Pr√©cisions)

*   **Base SwiftUI (`src/Presentation/Views/`) :** G√©n√©rer le code *strictement* depuis les SVG (`wireframes/` ou Blueprint). Respecter les `id` pour liaison et tests. Utiliser `@State`, `@StateObject`, `@ObservedObject`, `@EnvironmentObject` de mani√®re appropri√©e.
*   **ViewModel (`src/Presentation/ViewModels/`) :** Pattern MVVM. Exposer via `@Published`. Appeler Use Cases/Services Applicatifs. **Pas de logique m√©tier ici.**
*   **Charte Graphique :** Appliquer `spec/16-charte-graphique.md`.
*   **Accessibilit√© :** Impl√©menter `accessibilityLabel`, `accessibilityHint`, `accessibilityIdentifier` (bas√© sur `id` SVG), `accessibilityTraits`. Compatibilit√© VoiceOver/Dynamic Type obligatoire.
*   **Navigation (`src/Presentation/Coordinators/` ou SwiftUI native) :** Impl√©menter selon diagramme de navigation du Blueprint.

---

## 7. Tests (`EyeSlothTrainerTests/`)

*   **G√©n√©ration Tests :** Pour chaque t√¢che, g√©n√©rer les tests correspondants dans les dossiers d√©di√©s (`Unit/`, `Integration/`, `UI/`).
    *   **Unitaires :** Logique `Domain` et `Application`. XCTest. Couverture > 85%.
    *   **Int√©gration :** Interactions Use Case -> Repository Interface. Mocker *uniquement* les d√©pendances externes (r√©seau, BDD r√©elle).
    *   **UI / BDD (`EyeSlothTrainerTests/Features/` & `EyeSlothTrainerTests/Presentation/Steps/`) :** Impl√©menter les Step Definitions pour les Gherkin du Blueprint. Utiliser XCUITest. S√©lecteurs via `accessibilityIdentifier`.
*   **TDD :** Si sp√©cifi√©, g√©n√©rer test √©chouant -> code passant.
*   **Mocks :** Simples (protocoles + impl. factices) ou frameworks si projet l'utilise. Placer dans cibles de test.

---

## 8. Services Techniques & Externes (`src/Infrastructure/`)

*   **Couche d'Abstraction (ACL) :** Code interagissant avec VisionKit, ARKit, CoreML, SpeechRecognition, Persistence (CoreData, etc.) doit √™tre dans `src/Infrastructure/`.
*   **Interfaces D√©finies par Client :** `Application` ou `Domain` d√©finit les protocoles n√©cessaires (ex: `FaceDetector`, `DistanceProvider`, `SpeechRecognizer`).
*   **Adapters/Impl√©mentations (`src/Infrastructure/Services/` ou `src/Infrastructure/Repositories/`) :** L'Infrastructure fournit les impl√©mentations concr√®tes de ces protocoles.
*   **Injection :** Les impl√©mentations concr√®tes sont inject√©es via DI (ex: dans `AppDependencies.swift` ou √©quivalent).

---

## 9. Gestion du Code Source (GitFlow & Commits - Rappel Strict)

*   **Branches :** `feature/EYSL-XXX...`
*   **Commits :** Atomiques, fr√©quents. Format **strict** : `[EYSL-XXX][couche] type: description concise`.
    *   `couche` : `domain`, `app`, `infra`, `pres`, `test`, `docs`, `ci`, `shared`
    *   `type` : `feat`, `fix`, `refactor`, `test`, `docs`, `style`, `chore`

---

## 10. Anti-Patterns √† √âviter **ABSOLUMENT** (Rappel Strict)

*   **Code Mort/Non Atteignable :** Interdit.
*   **Duplication :** V√©rifier existence avant g√©n√©ration. Proposer r√©utilisation/refactoring.
*   **Sur-Abstraction / Complexit√© Inutile :** Interdit sauf si explicitement demand√© par le Blueprint.
*   **D√©pendances Incorrectes :** Interdit (cf. r√®gle 2).
*   **Ignorer le Blueprint :** Interdit. Toute d√©viation n√©cessite validation humaine.
*   **Commentaires Redondants :** Interdit. Documentation `///` pour API. Commentaires pour *pourquoi* complexe.

---
